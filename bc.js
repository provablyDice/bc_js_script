const _bc=()=>{var n={PLUS:"+",MINUS:"-",BASE:10,scale:0,bc_num:function(){this.n_sign=null,this.n_len=null,this.n_scale=null,this.n_value=null,this.toString=function(){let _,e;return e=this.n_value.join(""),_=(this.n_sign===n.PLUS?"":this.n_sign)+e.substr(0,this.n_len),this.n_scale>0&&(_+="."+e.substr(this.n_len,this.n_scale)),_}},bc_add:function(_,e,l){let u,c,s;if(_.n_sign===e.n_sign)u=n._bc_do_add(_,e,l),u.n_sign=_.n_sign;else switch(c=n._bc_do_compare(_,e,!1,!1),c){case-1:u=n._bc_do_sub(e,_,l),u.n_sign=e.n_sign;break;case 0:s=n.MAX(l,n.MAX(_.n_scale,e.n_scale)),u=n.bc_new_num(1,s),n.memset(u.n_value,0,0,s+1);break;case 1:u=n._bc_do_sub(_,e,l),u.n_sign=_.n_sign}return u},bc_compare:function(_,e){return n._bc_do_compare(_,e,!0,!1)},_one_mult:function(_,e,l,u,c,s){let i,r,a,t;if(0===u)n.memset(c,0,0,l);else if(1===u)n.memcpy(c,s,_,e,l);else{for(a=e+l-1,t=s+l-1,i=0;l-- >0;)r=_[a--]*u+i,c[t--]=r%n.BASE,i=Math.floor(r/n.BASE);0!==i&&(c[t]=i)}},bc_divide:function(_,e,l){let u,c,s,i,r,a,t,o,b,m,f,v,g,S,d,A,M,h,L,p,w,U;if(n.bc_is_zero(e))return-1;if(n.bc_is_zero(_))return n.bc_new_num(1,l);for(0===e.n_scale&&1===e.n_len&&1===e.n_value[0]&&(u=n.bc_new_num(_.n_len,l),u.n_sign=_.n_sign===e.n_sign?n.PLUS:n.MINUS,n.memset(u.n_value,_.n_len,0,l),n.memcpy(u.n_value,0,_.n_value,0,_.n_len+n.MIN(_.n_scale,l))),v=e.n_scale,a=e.n_len+v-1;v>0&&0===e.n_value[a--];)v--;for(m=_.n_len+v,o=_.n_scale-v,S=o<l?l-o:0,c=n.safe_emalloc(1,_.n_len+_.n_scale,S+2),null===c&&n.bc_out_of_memory(),n.memset(c,0,0,_.n_len+_.n_scale+S+2),n.memcpy(c,1,_.n_value,0,_.n_len+_.n_scale),f=e.n_len+v,s=n.safe_emalloc(1,f,1),null===s&&n.bc_out_of_memory(),n.memcpy(s,0,e.n_value,0,f),s[f]=0,a=0;0===s[a];)a++,f--;if(f>m+l?(g=l+1,w=!0):(w=!1,g=f>m?l+1:m-f+l+1),u=n.bc_new_num(g-l,l),n.memset(u.n_value,0,0,g),p=n.safe_emalloc(1,f,1),null===p&&n.bc_out_of_memory(),!w)for(U=Math.floor(10/(e.n_value[a]+1)),1!==U&&(n._one_mult(c,0,m+o+S+1,U,c,0),n._one_mult(e.n_value,a,f,U,e.n_value,a)),A=0,t=f>m?f-m:0;A<=m+l-f;){if(M=e.n_value[a]===c[A]?9:Math.floor((10*c[A]+c[A+1])/e.n_value[a]),e.n_value[a+1]*M>10*(10*c[A]+c[A+1]-e.n_value[a]*M)+c[A+2]&&(M--,e.n_value[a+1]*M>10*(10*c[A]+c[A+1]-e.n_value[a]*M)+c[A+2]&&M--),h=0,0!==M)for(p[0]=0,n._one_mult(e.n_value,a,f,M,p,1),i=A+f,r=f,d=0;d<f+1;d++)b=r<0?c[i]-0-h:c[i]-p[r--]-h,b<0?(b+=10,h=1):h=0,c[i--]=b;if(1===h){for(M--,i=A+f,r=f-1,L=0,d=0;d<f;d++)b=r<0?c[i]+0+L:c[i]+e.n_value[r--]+L,b>9?(b-=10,L=1):L=0,c[i--]=b;1===L&&(c[i]=(c[i]+1)%10)}u.n_value[t++]=M,A++}return u.n_sign=_.n_sign===e.n_sign?n.PLUS:n.MINUS,n.bc_is_zero(u)&&(u.n_sign=n.PLUS),n._bc_rm_leading_zeros(u),u},MUL_BASE_DIGITS:80,MUL_SMALL_DIGITS:20,bc_multiply:function(_,e,l){let u,c,s,i,r;return c=_.n_len+_.n_scale,s=e.n_len+e.n_scale,i=_.n_scale+e.n_scale,r=n.MIN(i,n.MAX(l,n.MAX(_.n_scale,e.n_scale))),u=n._bc_rec_mul(_,c,e,s,i),u.n_sign=_.n_sign===e.n_sign?n.PLUS:n.MINUS,u.n_len=s+c+1-i,u.n_scale=r,n._bc_rm_leading_zeros(u),n.bc_is_zero(u)&&(u.n_sign=n.PLUS),u},new_sub_num:function(_,e,l,u=0){const c=new n.bc_num;return c.n_sign=n.PLUS,c.n_len=_,c.n_scale=e,c.n_value=n.safe_emalloc(1,_+e,0),n.memcpy(c.n_value,0,l,u,_+e),c},_bc_simp_mul:function(_,e,l,u,c){let s,i,r,a,t,o,b,m,f;for(f=e+u+1,s=n.bc_new_num(f,0),t=e-1,o=u-1,a=f-1,m=0,b=0;b<f-1;b++){for(i=t-n.MAX(0,b-u+1),r=o-n.MIN(b,u-1);i>=0&&r<=o;)m+=_.n_value[i--]*l.n_value[r++];s.n_value[a--]=Math.floor(m%n.BASE),m=Math.floor(m/n.BASE)}return s.n_value[a]=m,s},_bc_shift_addsub:function(_,e,l,u){let c,s,i,r;if(i=e.n_len,0===e.n_value[0]&&i--,_.n_len+_.n_scale<l+i)throw new Error("len + scale < shift + count");if(c=_.n_len+_.n_scale-l-1,s=e.n_len-1,r=0,u){for(;i--;)_.n_value[c]-=e.n_value[s--]+r,_.n_value[c]<0?(r=1,_.n_value[c--]+=n.BASE):(r=0,c--);for(;r;)_.n_value[c]-=r,_.n_value[c]<0?_.n_value[c--]+=n.BASE:r=0}else{for(;i--;)_.n_value[c]+=e.n_value[s--]+r,_.n_value[c]>n.BASE-1?(r=1,_.n_value[c--]-=n.BASE):(r=0,c--);for(;r;)_.n_value[c]+=r,_.n_value[c]>n.BASE-1?_.n_value[c--]-=n.BASE:r=0}return!0},_bc_rec_mul:function(_,e,l,u,c){let s,i,r,a,t,o,b,m,f,v,g,S,d,A,M;return e+u<n.MUL_BASE_DIGITS||e<n.MUL_SMALL_DIGITS||u<n.MUL_SMALL_DIGITS?n._bc_simp_mul(_,e,l,u,c):(g=Math.floor((n.MAX(e,u)+1)/2),e<g?(r=n.bc_init_num(),i=n.new_sub_num(e,0,_.n_value)):(r=n.new_sub_num(e-g,0,_.n_value),i=n.new_sub_num(g,0,_.n_value,e-g)),u<g?(t=n.bc_init_num(),a=n.new_sub_num(u,0,l.n_value)):(t=n.new_sub_num(u-g,0,l.n_value),a=n.new_sub_num(g,0,l.n_value,u-g)),n._bc_rm_leading_zeros(r),n._bc_rm_leading_zeros(i),n._bc_rm_leading_zeros(t),n._bc_rm_leading_zeros(a),d=n.bc_is_zero(r)||n.bc_is_zero(t),f=n.bc_init_num(),v=n.bc_init_num(),f=n.bc_sub(r,i,0),A=f.n_len,v=n.bc_sub(a,t,0),M=v.n_len,o=d?n.bc_init_num():n._bc_rec_mul(r,r.n_len,t,t.n_len,0),b=n.bc_is_zero(f)||n.bc_is_zero(v)?n.bc_init_num():n._bc_rec_mul(f,A,v,M,0),m=n.bc_is_zero(i)||n.bc_is_zero(a)?n.bc_init_num():n._bc_rec_mul(i,i.n_len,a,a.n_len,0),S=e+u+1,s=n.bc_new_num(S,0),d||(n._bc_shift_addsub(s,o,2*g,0),n._bc_shift_addsub(s,o,g,0)),n._bc_shift_addsub(s,m,g,0),n._bc_shift_addsub(s,m,0,0),n._bc_shift_addsub(s,b,g,f.n_sign!==v.n_sign),s)},_bc_do_compare:function(_,e,l,u){let c,s,i;if(l&&_.n_sign!==e.n_sign)return _.n_sign===n.PLUS?1:-1;if(_.n_len!==e.n_len)return _.n_len>e.n_len?l&&_.n_sign!==n.PLUS?-1:1:l&&_.n_sign!==n.PLUS?1:-1;for(i=_.n_len+Math.min(_.n_scale,e.n_scale),c=0,s=0;i>0&&_.n_value[c]===e.n_value[s];)c++,s++,i--;if(u&&1===i&&_.n_scale===e.n_scale)return 0;if(0!==i)return _.n_value[c]>e.n_value[s]?l&&_.n_sign!==n.PLUS?-1:1:l&&_.n_sign!==n.PLUS?1:-1;if(_.n_scale!==e.n_scale)if(_.n_scale>e.n_scale){for(i=_.n_scale-e.n_scale;i>0;i--)if(0!==_.n_value[c++])return l&&_.n_sign!==n.PLUS?-1:1}else for(i=e.n_scale-_.n_scale;i>0;i--)if(0!==e.n_value[s++])return l&&_.n_sign!==n.PLUS?1:-1;return 0},bc_sub:function(_,e,l){let u,c,s;if(_.n_sign!==e.n_sign)u=n._bc_do_add(_,e,l),u.n_sign=_.n_sign;else switch(c=n._bc_do_compare(_,e,!1,!1),c){case-1:u=n._bc_do_sub(e,_,l),u.n_sign=e.n_sign===n.PLUS?n.MINUS:n.PLUS;break;case 0:s=n.MAX(l,n.MAX(_.n_scale,e.n_scale)),u=n.bc_new_num(1,s),n.memset(u.n_value,0,0,s+1);break;case 1:u=n._bc_do_sub(_,e,l),u.n_sign=_.n_sign}return u},_bc_do_add:function(_,e,l){let u,c,s,i,r,a,t,o,b,m;if(c=n.MAX(_.n_scale,e.n_scale),s=n.MAX(_.n_len,e.n_len)+1,u=n.bc_new_num(s,n.MAX(c,l)),o=_.n_scale,b=e.n_scale,i=_.n_len+o-1,r=e.n_len+b-1,a=c+s-1,o!==b)if(o>b)for(;o>b;)u.n_value[a--]=_.n_value[i--],o--;else for(;b>o;)u.n_value[a--]=e.n_value[r--],b--;for(o+=_.n_len,b+=e.n_len,t=0;o>0&&b>0;)m=_.n_value[i--]+e.n_value[r--]+t,m>=n.BASE?(t=1,m-=n.BASE):t=0,u.n_value[a]=m,a--,o--,b--;if(0===o)for(;b-- >0;)m=e.n_value[r--]+t,m>=n.BASE?(t=1,m-=n.BASE):t=0,u.n_value[a--]=m;else for(;o-- >0;)m=_.n_value[i--]+t,m>=n.BASE?(t=1,m-=n.BASE):t=0,u.n_value[a--]=m;return 1===t&&(u.n_value[a]+=1),n._bc_rm_leading_zeros(u),u},_bc_do_sub:function(_,e,l){let u,c,s,i,r,a,t,o,b,m,f;if(s=n.MAX(_.n_len,e.n_len),c=n.MAX(_.n_scale,e.n_scale),r=n.MIN(_.n_len,e.n_len),i=n.MIN(_.n_scale,e.n_scale),u=n.bc_new_num(s,n.MAX(c,l)),a=_.n_len+_.n_scale-1,t=e.n_len+e.n_scale-1,o=s+c-1,b=0,_.n_scale!==i)for(m=_.n_scale-i;m>0;m--)u.n_value[o--]=_.n_value[a--];else for(m=e.n_scale-i;m>0;m--)f=0-e.n_value[t--]-b,f<0?(f+=n.BASE,b=1):b=0,u.n_value[o--]=f;for(m=0;m<r+i;m++)f=_.n_value[a--]-e.n_value[t--]-b,f<0?(f+=n.BASE,b=1):b=0,u.n_value[o--]=f;if(s!==r)for(m=s-r;m>0;m--)f=_.n_value[a--]-b,f<0?(f+=n.BASE,b=1):b=0,u.n_value[o--]=f;return n._bc_rm_leading_zeros(u),u},bc_new_num:function(_,e){let l;return l=new n.bc_num,l.n_sign=n.PLUS,l.n_len=_,l.n_scale=e,l.n_value=n.safe_emalloc(1,_+e,0),n.memset(l.n_value,0,0,_+e),l},safe_emalloc:function(n,_,e){return Array(n*_+e)},bc_init_num:function(){return new n.bc_new_num(1,0)},_bc_rm_leading_zeros:function(n){for(;0===n.n_value[0]&&n.n_len>1;)n.n_value.shift(),n.n_len--},php_str2num:function(_){let e;return e=_.indexOf("."),-1===e?n.bc_str2num(_,0):n.bc_str2num(_,_.length-e)},CH_VAL:function(n){return n-"0"},BCD_CHAR:function(n){return n+"0"},isdigit:function(n){return isNaN(parseInt(n,10))},bc_str2num:function(_,e){let l,u,c,s,i,r,a;for(l=_.split(""),c=0,s=0,i=0,r=!1,"+"!==l[c]&&"-"!==l[c]||c++;"0"===l[c];)c++;for(;l[c]%1==0;)c++,s++;for("."===l[c]&&c++;l[c]%1==0;)c++,i++;if(l[c]||s+i===0)return n.bc_init_num();for(i=n.MIN(i,e),0===s&&(r=!0,s=1),u=n.bc_new_num(s,i),c=0,"-"===l[c]?(u.n_sign=n.MINUS,c++):(u.n_sign=n.PLUS,"+"===l[c]&&c++);"0"===l[c];)c++;for(a=0,r&&(u.n_value[a++]=0,s=0);s>0;s--)u.n_value[a++]=n.CH_VAL(l[c++]);if(i>0)for(c++;i>0;i--)u.n_value[a++]=n.CH_VAL(l[c++]);return u},cint:function(n){void 0===n&&(n=0);let _=parseInt(n,10);return isNaN(_)&&(_=0),_},MIN:function(n,_){return n>_?_:n},MAX:function(n,_){return n>_?n:_},ODD:function(n){return 1&n},memset:function(n,_,e,l){let u;for(u=0;u<l;u++)n[_+u]=e},memcpy:function(n,_,e,l,u){let c;for(c=0;c<u;c++)n[_+c]=e[l+c];return!0},bc_is_zero:function(n){let _,e;for(_=n.n_len+n.n_scale,e=0;_>0&&0===n.n_value[e++];)_--;return 0===_},bc_out_of_memory:function(){throw new Error("(BC) Out of memory")}};return n},bcdiv=(n,_,e)=>{const l=_bc();let u,c,s;if(void 0===e&&(e=l.scale),e=e<0?0:e,u=l.bc_init_num(),c=l.bc_init_num(),s=l.bc_init_num(),u=l.php_str2num(n.toString()),c=l.php_str2num(_.toString()),s=l.bc_divide(u,c,e),-1===s)throw new Error(11,"(BC) Division by zero");return s.n_scale>e&&(s.n_scale=e),s.toString()},bcsub=(n,_,e)=>{const l=_bc();let u,c,s;return void 0===e&&(e=l.scale),e=e<0?0:e,u=l.bc_init_num(),c=l.bc_init_num(),s=l.bc_init_num(),u=l.php_str2num(n.toString()),c=l.php_str2num(_.toString()),s=l.bc_sub(u,c,e),s.n_scale>e&&(s.n_scale=e),s.toString()},bcmul=(n,_,e)=>{const l=_bc();let u,c,s;return void 0===e&&(e=l.scale),e=e<0?0:e,u=l.bc_init_num(),c=l.bc_init_num(),s=l.bc_init_num(),u=l.php_str2num(n.toString()),c=l.php_str2num(_.toString()),s=l.bc_multiply(u,c,e),s.n_scale>e&&(s.n_scale=e),s.toString()};